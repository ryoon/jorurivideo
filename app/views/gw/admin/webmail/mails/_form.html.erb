<%
html_format = @item.in_format == Gw::WebmailMail::FORMAT_HTML
%>
<script type="text/javascript" src="/_common/js/swfupload/swfupload.js"></script>
<script type="text/javascript" src="/_common/js/swfupload/plugins/swfupload.queue.js"></script>
<script type="text/javascript" src="/_common/js/swfupload/plugins/fileprogress.js"></script>
<script type="text/javascript" src="/_common/js/swfupload/plugins/handlers.js"></script>
<script type="text/javascript" src="/_common/js/dump.js"></script>
<%= javascript_include_tag("/_common/js/tiny_mce/tiny_mce.js") %>
<%= javascript_include_tag("/_common/js/tiny_mce/init_html_mail.js") %>
<script type="text/javascript">
//<![CDATA[
// onload event
var swfu = null;
window.onload = function() {
  var list = document.getElementsByTagName('input');
  for (var i=0; i<list.length; i++) {
    if(list[i].type.match(/^(text|password|radio|checkbox)$/) != ""){
      list[i].onkeypress = function (event) { return stopSubmitting(event); }
    }
    if(list[i].type == "text") {
      list[i].onkeydown = function (event) { return stopReset(event); }
    }
  }
  var list = document.getElementsByTagName('textarea');
  for (var i=0; i<list.length; i++) {
    list[i].onkeydown = function (event) { return stopReset(event); }
  }
  //<% unless @item.in_cc.blank? %>
  toggleAddressInput('cc');
  //<% end %>
  //<% unless @item.in_bcc.blank? %>
  toggleAddressInput('bcc');
  //<% end %>
  initSwfupload(swfu);
  loadUploadedFiles();
  if ($('item_in_format').value == 'html') {
    initTinyMCE();
  }
}
// EnterキーによるSubmitを無効化
function stopSubmitting(e) {
  if (!e) var e = window.event;
  if (e.keyCode == 13) return false;
}
function stopReset(e) {
  if (!e) var e = window.event;
  if (e.keyCode == 27) return false;
}
// form check
function isChanged() {
  if ( $('original_to').value != $('item_in_to').value ) return true;
  if ( $('original_cc').value != $('item_in_cc').value ) return true;
  if ( $('original_bcc').value != $('item_in_bcc').value ) return true;
  if ( $('original_subject').value != $('item_in_subject').value ) return true;
  if ( $('original_format').value != $('item_in_format').value ) return true;
  if ($('original_format').value == 'text') {
    if ( $('original_body').value != $('item_in_body').value ) return true; 
  } else if ($('original_format').value == 'html')  {
    if ( $('original_html_body').value != $('item_in_html_body').value ) return true;
  }
  return false;
}
// form check
var form_submitted = false;
window.onbeforeunload = function() {
  if (form_submitted == false && isChanged()) {
    return "メールは保存されていません。";
  }
}
// form check
$('item_form').onsubmit = function() {
  if (form_submitted) return false;
  if ($('item_in_format').value == 'html') {
    var html = tinyMCE.activeEditor.getContent();
    $('item_in_body').value = html_to_text(html);
  }
  form_submitted = true;
  return true;
}
// submit button
function submitButtonOnClick() {
  alert("アドレス帳を閉じてください。");
  return false;
};
function applyOnClickToSubmitButtons(submits, onclick) {
  for(var i = 0;i < submits.length;i++) {
    submits[i].onclick = onclick;
  }
}
// file uploader
function initSwfupload(swfu) {
  swfu = new SWFUpload({
    upload_url : "<%= gw_webmail_attachments_path %>",
    post_params: {
      authenticity_token : "<%= form_authenticity_token %>",
      tmp_id : "<%= @item.tmp_id %>",
      total_size_limit : "5 MB"
    },
    flash_url : "/_common/js/swfupload/swfupload.swf",
    file_post_name : "file",
    file_size_limit : "5 MB",
    file_types : "*.*",
    file_types_description : "All Files",
    file_upload_limit : 0,
    file_queue_limit : 0,
    custom_settings : {
      progressTarget : "fsUploadProgress",
      cancelButtonId : "btnCancel"
    },
    debug: false,
    prevent_swf_caching : false,
    button_image_url: "/_common/themes/admin/gw/images/bt/bt_f_newfile.png",
    button_width: "99",
    button_height: "24",
    button_placeholder_id: "spanButtonPlaceHolder",//"uploadHtml",
    //file_dialog_complete_handler : function(numFilesSelected, numFilesQueued) { this.startUpload(); },
    //upload_error_handler : function(file, errorCode, message){ alert('読み込みに失敗しました。'); },
    //upload_success_handler : function(file, data, response) { tinyMCE.activeEditor.setContent(data); }
    file_queued_handler : fileQueued,
    file_queue_error_handler : fileQueueError,
    file_dialog_complete_handler : fileDialogComplete,
    upload_start_handler : uploadStart,
    upload_progress_handler : uploadProgress,
    upload_error_handler : uploadError,
    //upload_success_handler : uploadSuccess,
    upload_success_handler : function(file, data) {
      var progress = new FileProgress(file, this.customSettings.progressTarget);
      progress.setComplete();
      progress.setStatus("Complete.");
      progress.toggleCancel(false);
      if (data.match(/^Error/i) != null) { 
        alert(data);
      } else {
        var id = '', name = '', size = '', image_is = '';
        if (data.match(/^OK ([0-9]+) (.+) (.+?) (.?)$/)) {
          id = RegExp.$1;
          name = RegExp.$2;
          size = RegExp.$3;
          image_is = RegExp.$4;
        }
        addUploadedFile(id, name, size, image_is);
      }
    },
    upload_complete_handler : uploadComplete,
    queue_complete_handler : queueComplete  // Queue plugin event
  });
}

// load uploaded files
function loadUploadedFiles() {
  var uri = "<%= gw_webmail_attachments_path(:format => 'xml') %>";
  var myAjax = new Ajax.Request(uri, {
    method: 'get',
    parameters: "tmp_id=<%= @item.tmp_id %>",
    onSuccess: showUploadedFiles,
    onFailure: function(request) { alert('送信に失敗しました。'); }
  });
}
function showUploadedFiles(request) {
  var html  = "";
  var items = request.responseXML.getElementsByTagName("item");
  for (var i = 0; i < items.length; i++) {
    var item = items[i];
    var id   = getNodeValue(item, 'id');
    var name = getNodeValue(item, 'name');
    var size = getNodeValue(item, 'eng_unit');
    var image_is = getNodeValue(item, 'image_is');
    addUploadedFile(id, name, size, image_is);
  }
}
function getNodeValue(node, name) {
  var elem = node.getElementsByTagName(name);
  if (elem && elem[0] && elem[0].firstChild) {
    return elem[0].firstChild.nodeValue;
  }
  return "";
}
function addUploadedFile(id, name, size, image_is) {
  var field = $('uploadedFiles');
  if (field.visible() == false) { field.show(); }
  var sepa = ""; //(field.innerHTML == "") ? '' : '<span class="uploadedFileSeparator"></span>';
  var icon = "iconFile icon" + name.replace(/.*\./, '').capitalize();
  var html = '<span id="uploadedFile' + id + '" class="uploadedFile">' + sepa;
  var uri = '<%= gw_webmail_attachments_path %>'
    + '/' + id + '?tmp_id=<%= @item.tmp_id %>&filename=' + encodeURIComponent(name);
  var opt = '';
  if (image_is == '1') {
    opt = 'target="_blank"';
  } else {
    opt = 'onclick="return downloadUploadedFile(this.href);"';
  }
  html += '<a href="' + uri +'" class="uploadedFileName '+ icon + '" ' + opt + ' >' + name.escapeHTML() + "(" + size + ")" + '</a>';
  html += '<a href="#" class="deleteUploadedFile" onclick="return deleteUploadedFile(\'' + id + '\')" title="削除">x</a>';
  html += '</span> ';
  field.innerHTML += html;
}
function downloadUploadedFile(uri) {
  var beforeUnloadFunc = window.onbeforeunload;
  window.onbeforeunload = function() {
    window.onbeforeunload = beforeUnloadFunc;
  };
  window.location.href = uri;
  return false; 
}
function deleteUploadedFile(id) {
  var elm = $('uploadedFile' + id);
  var uri = "<%= gw_webmail_attachments_path %>/" + id + '.xml';
  var myAjax = new Ajax.Request(uri, {
    method: 'post',
    parameters: "_method=delete&authenticity_token=<%= form_authenticity_token %>&tmp_id=<%= @item.tmp_id %>",
    onComplete: deletedUploadedFile,
    onFailure: function(request) { alert('送信に失敗しました。'); }
  });
  return false;
}
function deletedUploadedFile(request) {
  var id  = request.responseText.replace(/^OK /, '');
  var elm = $('uploadedFile' + id);
  if (elm) { elm.remove(); }
  var field = $('uploadedFiles');
  field.innerHTML = field.innerHTML.replace(/> +</, '> <');
  if (field.innerHTML.match(/^ *$/) != null) {
    field.innerHTML = "";
    field.hide();
  }
}
//toggle editor
function toggleEditor(format) {
  if ($('item_in_format').value == format) return;  
  switch(format) {
  case 'text':
    if (!confirm("テキスト形式に変換することにより、書式情報が失われます。よろしいですか？")) return;
    $('item_in_body').value = "";
    $('textFormatEditor').style.display = "block";
    $('htmlFormatEditor').style.display = "none";
    $('item_in_body').value = html_to_text(tinyMCE.activeEditor.getContent());
    tinyMCE.activeEditor.setContent('');
    break;
  case 'html':
    $('textFormatEditor').style.display = "none";
    $('htmlFormatEditor').style.display = "block";
    var html = text_to_html($('item_in_body').value);
    $('item_in_body').value = '';
    var ace = tinyMCE.activeEditor;
    if (ace) {
      ace.setContent(html);
    } else {
      mceOnLoadContent = function(ed, o) {
        ed.setContent(html);
        ed.onLoadContent.remove(mceOnLoadContent);
      };
      mceOnAddEditor = function(mgr, ed) {
        ed.onLoadContent.add(mceOnLoadContent);
        tinyMCE.onAddEditor.remove(mceOnAddEditor);
      };
      tinyMCE.onAddEditor.add(mceOnAddEditor);
      initTinyMCE();
    }
    break;
  }
  $('item_in_format').value = format;
}
function text_to_html(text) {
  var lines = text.split("\n");
  var rslt = "";
  for (var i = 0;i < lines.length;i++) {
    line = lines[i].replace("\r", '').escapeHTML();
    line = line.replace(/(\s+)(\s)/, function(s, p1, p2) {
    var nbsp = "";
    for (var k = 0;k < p1.length;k++) {
      nbsp += "&nbsp;";
    }
      return nbsp + p2;
  });
  if (line == '') line = '&nbsp;';
    rslt += "<div>" + line + "</div>\n";
  }
  return rslt;
}
function html_to_text(html) {
  var rslt = '';
  var stack = [];
  var current = document.createElement('div');
  current.innerHTML = html;
  while (current) {
    var i = 0;
    var nodes = current.childNodes;
    while (i < nodes.length) {
      var node = nodes[i];
      if (node.nodeType == 1) { //Element
        switch(node.nodeName.toLowerCase()) {
        case 'div':
        case 'p':
        case 'li':
          if (rslt != '') {
            rslt += "\n";
          }
          break;
        }
        for (var k = i; k >= 0; k--) current.removeChild(nodes[k]);
        stack.push(current);
        stack.push(node);
        break;
      } else if (node.nodeType == 3) { //Text
        var txt = node.nodeValue;
        if (!txt.match(/^\s+$/)) {
          rslt += txt;
        }
      }
      i++;
    }  
    current = stack.pop();    
  }
  return rslt;
}
function loadTemplate() {
  var elm_template = $('changeTemplate');
  if (!elm_template.value) return false;
  if (!confirmChangeTemplate()) {
    elm_template.value = "";
    return false;
  }
  var uri = "<%= gw_webmail_templates_path() %>/" + elm_template.value + ".xml";
  var myAjax = new Ajax.Request(uri, {
    method: 'get',
    onSuccess: function(request) {
      showTemplate(request.responseXML);
    },
    onFailure: function(request) { alert('テンプレートの取得に失敗しました。'); },
    onException: function(request, ex) {
      alert("テンプレートの取得中にエラーが発生しました。\n\n" + ex.message);
    },
    onComplete : function(request) {
      elm_template.value = "";
    }
  });
  return false;
}
function confirmChangeTemplate() {
  if (isChanged() && !confirm('入力内容は失われますがよろしいですか？')) {
    return false;
  }
  return true;
}
function showTemplate(template) {
  var ccElm = $('item_in_cc');
  var bccElm = $('item_in_bcc');
  $('item_in_to').value = getNodeValue(template, 'to');
  ccElm.value = getNodeValue(template, 'cc');
  if (ccElm.value !="") toggleAddressInput('cc');
  bccElm.value = getNodeValue(template, 'bcc');
  if (bccElm.value !="") toggleAddressInput('bcc');
  $('item_in_subject').value = getNodeValue(template, 'subject');
  if ($('item_in_format').value == "html") {
    tinyMCE.activeEditor.setContent(text_to_html(getNodeValue(template, 'body')));
  } else {
    $('item_in_body').value = getNodeValue(template, 'body');
  }
}
function startAddressSelection(prefix) {
  var reverse = {'sys':'pri', 'pri':'sys'};
  var addressesForm = $('mailAddressesForm');
  var current = AddressSelector.instance.currentBook();
  if (current && current == prefix) {
    AddressSelector.instance.finishSelection(true);
  } else {
    AddressSelector.instance.toggle(prefix, $('item_in_to').value, $('item_in_cc').value, $('item_in_bcc').value, addressSelectorCallBack);
    $(prefix + '_openAddressButton').className = 'current';
    $(reverse[prefix] + '_openAddressButton').className = '';
    applyOnClickToSubmitButtons($('item_form').commit_send, submitButtonOnClick);
    applyOnClickToSubmitButtons($('item_form').commit_draft, submitButtonOnClick);
    if (addressesForm.visible()) addressesForm.hide();             
  }
  return false;
}
function addressSelectorCallBack(ok, to, cc, bcc) {
  if (ok) {
    $('item_in_to').value = to;
    $('item_in_cc').value = cc;
    $('item_in_bcc').value = bcc;
    if (cc != "") toggleAddressInput('cc');
    if (bcc != "") toggleAddressInput('bcc');
  }
  $('mailAddressesForm').show();
  $('sys_openAddressButton').className = '';
  $('pri_openAddressButton').className = '';
  applyOnClickToSubmitButtons($('item_form').commit_send, null);
  applyOnClickToSubmitButtons($('item_form').commit_draft, null);
}
function toggleAddressInput(type) {
  var containerElm = $(type + 'Container');
  if (containerElm && !containerElm.visible()) containerElm.show();
  var buttonElm = $(type + 'ToggleButton');
  if (buttonElm && buttonElm.visible()) buttonElm.hide();
} 
//]]>
</script>

<div id="openAddress">
  <a href="#" id="sys_openAddressButton" onclick="return startAddressSelection('sys');"><%= Application.config(:sys_address, "組織アドレス帳") %></a>
  <a href="#" id="pri_openAddressButton" onclick="return startAddressSelection('pri');"><%= Application.config(:address_group, "個人アドレス帳") %></a>
</div>

<%= render :partial => "address_selector" %>
<%= f.hidden_field :tmp_id %>

<div id="mailAddressesForm" class="mailForm">
<table id="mailAddresses" class="mailAttributes">
  <tr>
    <th>宛先 ：</th>
    <td><%= f.text_area :in_to, :class => 'to' %></td>
  </tr><tr id="ccContainer" style="display:none;">
    <th>Cc ：</th>
    <td><%= f.text_area :in_cc, :class => 'cc' %></td>
  </tr><tr id="bccContainer" style="display:none;">
    <th>Bcc ：</th>
    <td><%= f.text_area :in_bcc, :class => 'bcc' %></td>
  </tr><tr>
    <th></th>
    <td style="padding-bottom:0"><div class="addressToggleButtons">
      <%= link_to 'Ccを追加', '#', :id => "ccToggleButton", :onclick => "return toggleAddressInput('cc');" %>
      <%= link_to 'Bccを追加', '#', :id => "bccToggleButton", :onclick => "return toggleAddressInput('bcc');" %>
    </div></td>
  </tr>
</table>
</div>
<div class="mailForm">
  
<table class="mailAttributes">
  <tr>
    <th>件名 ：</th>
    <td><%= f.text_area :in_subject, :class => 'subject' %></td>
  </tr><tr>
    <th>添付 ：</th>
    <td>
      <table style="width: 100%;"><tr><td>
        <div id="swfupButtons">
          <span id="spanButtonPlaceHolder"></span
          ><input id="btnCancel" type="button" value="キャンセル" onclick="swfu.cancelQueue();" disabled="disabled" />
        </div>
      </td><td style="vertical-align: bottom;">
        <div class="editorMenu">
          <% if request.remote_ip =~ /^192\.168\.32\./ %>
          <div class="formatSelector">
            <%= link_to 'TEXT', '#', :onclick => "toggleEditor('text');return false;", :title => "TEXT形式" %>
            <%= link_to 'HTML', '#', :onclick => "toggleEditor('html');return false;", :title => "HTML形式" %>
          </div>
          <% end %>
          
          <div class="templateSelector">
            <%= select_tag :changeTemplate,
              options_from_collection_for_select(Gw::WebmailTemplate.user_templates, 'id', 'name'),
              :include_blank => '# テンプレート切替', :onchange => "return loadTemplate();" %>
          </div>
        <!-- end of editorMenu --></div>
      </td></tr></table>
      
      <div id="uploadedFiles" style="display: none;"></div>
      <div id="divStatus"></div>
      <div id="fsUploadProgress"></div>
    </td>
  </tr>
</table>
<%= f.hidden_field :in_format %>

<%= show_tag_if 'div', !html_format, :id => 'textFormatEditor', :class => 'textFormatEditor' do %>
  <%= f.text_area :in_body, :class => 'body', :style => "width:#{mail_form_size(@mail_form_size)[:textarea]}px;" %>
<% end %>

<%= show_tag_if 'div', html_format, :id => 'htmlFormatEditor', :class => 'htmlFormatEditor' do %>
  <%= f.text_area :in_html_body, :class => 'mceEditor' %>
<% end %>

<div class="recipientConfirm">
  <%= f.check_box :request_mdn %>開封確認メッセージを要求する
</div>

</div>
